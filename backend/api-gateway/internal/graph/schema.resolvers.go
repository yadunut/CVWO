package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	"github.com/yadunut/CVWO/backend/api-gateway/internal/graph/model"
	"github.com/yadunut/CVWO/backend/api-gateway/internal/proto"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input *model.RegisterInput) (model.RegisterResponse, error) {
	res, err := r.AuthClient.Register(ctx, &proto.RegisterRequest{
		Username: input.Username,
		Email:    input.Email,
		Password: input.Password,
	})
	if err != nil {
		return nil, err
	}
	if res.Status == proto.ResponseStatus_SUCCESS {
		return model.SuccessfulRegistration{Token: res.Token}, nil
	} else {
		return model.InvalidRegistrationError{Message: res.Error}, nil
	}
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input *model.LoginInput) (model.LoginResponse, error) {
	res, err := r.AuthClient.Login(ctx, &proto.LoginRequest{
		UsernameOrEmail: input.Username,
		Password:        input.Password,
	})
	if err != nil {
		return nil, err
	}
	if res.Status == proto.ResponseStatus_SUCCESS {
		return model.SuccessfulLogin{Token: res.Token}, nil
	} else {
		return model.InvalidLoginError{Message: res.Error}, nil
	}
}

// Threads is the resolver for the threads field.
func (r *queryResolver) Threads(ctx context.Context) ([]*model.Thread, error) {
	panic(fmt.Errorf("not implemented: Threads - threads"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
